import tkinter as tk
from tkinter import messagebox
import sqlite3
from datetime import datetime

conn = sqlite3.connect('finance_manager.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL
            )''')

c.execute('''CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            category TEXT,
            amount REAL,
            date TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
            )''')

conn.commit()

class FinanceApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Finance Manager")
        self.root.geometry("400x400")
        
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack()
        
        self.show_login_screen()

    def show_login_screen(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        tk.Label(self.main_frame, text="Login", font=('Arial', 16)).pack(pady=20)
        
        tk.Label(self.main_frame, text="Username").pack()
        self.username_entry = tk.Entry(self.main_frame)
        self.username_entry.pack()

        tk.Label(self.main_frame, text="Password").pack()
        self.password_entry = tk.Entry(self.main_frame, show='*')
        self.password_entry.pack()

        tk.Button(self.main_frame, text="Login", command=self.login).pack(pady=10)
        tk.Button(self.main_frame, text="Register", command=self.show_registration_screen).pack()

    def show_registration_screen(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        tk.Label(self.main_frame, text="Register", font=('Arial', 16)).pack(pady=20)
        
        tk.Label(self.main_frame, text="Username").pack()
        self.reg_username_entry = tk.Entry(self.main_frame)
        self.reg_username_entry.pack()

        tk.Label(self.main_frame, text="Password").pack()
        self.reg_password_entry = tk.Entry(self.main_frame, show='*')
        self.reg_password_entry.pack()

        tk.Button(self.main_frame, text="Register", command=self.register).pack(pady=10)
        tk.Button(self.main_frame, text="Back to Login", command=self.show_login_screen).pack()

    def register(self):
        username = self.reg_username_entry.get()
        password = self.reg_password_entry.get()

        if username and password:
            try:
                c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
                conn.commit()
                messagebox.showinfo("Success", "Registration successful!")
                self.show_login_screen()
            except sqlite3.IntegrityError:
                messagebox.showerror("Error", "Username already exists.")
        else:
            messagebox.showerror("Error", "All fields are required.")

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        c.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
        user = c.fetchone()

        if user:
            self.user_id = user[0]  
            self.show_dashboard()
        else:
            messagebox.showerror("Error", "Invalid username or password.")

    def show_dashboard(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        tk.Label(self.main_frame, text="Dashboard", font=('Arial', 16)).pack(pady=20)
        
        tk.Button(self.main_frame, text="Add Income/Expense", command=self.show_add_transaction_screen).pack(pady=10)
        tk.Button(self.main_frame, text="View Financial Report", command=self.show_report).pack(pady=10)
        tk.Button(self.main_frame, text="Logout", command=self.show_login_screen).pack(pady=10)

    def show_add_transaction_screen(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        tk.Label(self.main_frame, text="Add Transaction", font=('Arial', 16)).pack(pady=20)
        
        tk.Label(self.main_frame, text="Type").pack()
        self.type_var = tk.StringVar(value="Income")
        tk.Radiobutton(self.main_frame, text="Income", variable=self.type_var, value="Income").pack()
        tk.Radiobutton(self.main_frame, text="Expense", variable=self.type_var, value="Expense").pack()

        tk.Label(self.main_frame, text="Category").pack()
        self.category_entry = tk.Entry(self.main_frame)
        self.category_entry.pack()

        tk.Label(self.main_frame, text="Amount").pack()
        self.amount_entry = tk.Entry(self.main_frame)
        self.amount_entry.pack()

        tk.Button(self.main_frame, text="Add Transaction", command=self.add_transaction).pack(pady=10)
        tk.Button(self.main_frame, text="Back", command=self.show_dashboard).pack()

    def add_transaction(self):
        transaction_type = self.type_var.get()
        category = self.category_entry.get()
        amount = self.amount_entry.get()

        if category and amount:
            try:
                amount = float(amount)
                date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                c.execute("INSERT INTO transactions (user_id, type, category, amount, date) VALUES (?, ?, ?, ?, ?)",
                          (self.user_id, transaction_type, category, amount, date))
                conn.commit()
                messagebox.showinfo("Success", "Transaction added successfully!")
                self.show_dashboard()
            except ValueError:
                messagebox.showerror("Error", "Invalid amount entered.")
        else:
            messagebox.showerror("Error", "All fields are required.")

    def show_report(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        tk.Label(self.main_frame, text="Financial Report", font=('Arial', 16)).pack(pady=20)
        
        c.execute("SELECT type, category, amount, date FROM transactions WHERE user_id = ?", (self.user_id,))
        transactions = c.fetchall()

        if transactions:
            report_text = ""
            total_income = 0
            total_expense = 0

            for transaction in transactions:
                type_, category, amount, date = transaction
                report_text += f"{type_}: {category}, Amount: {amount}, Date: {date}\n"
                if type_ == "Income":
                    total_income += amount
                else:
                    total_expense += amount
            
            savings = total_income - total_expense
            report_text += f"\nTotal Income: {total_income}\nTotal Expense: {total_expense}\nSavings: {savings}"

            report_label = tk.Label(self.main_frame, text=report_text, justify='left')
            report_label.pack()

        else:
            tk.Label(self.main_frame, text="No transactions available.").pack()

        tk.Button(self.main_frame, text="Back", command=self.show_dashboard).pack(pady=10)


if __name__ == "__main__":
    root = tk.Tk()
    app = FinanceApp(root)
    root.mainloop()

conn.close()
